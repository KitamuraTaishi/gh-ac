name: TEST
run-name: TEST -  ${{ toJSON(github.event.*.message) }} by ${{ github.actor }} ${{ github.ref }}
on: push
  # workflow_dispatch:
  #   inputs:
  #     version:
  #       type: string
  #       required: true
  #       description: version
defaults:
  run:
    shell: bash
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
env:
  IMAGE_NAME: gha-image
  
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GITHUB_REPOSITORY: ${{ github.repository_owner }}
    steps:
      - run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
        env:
          GH_REP: ${{ env.REPO }}
      - run: echo "${GH_REP}"

  # publish:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #     contents: read
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: docker/metadata-action@v5
  #       id: meta
  #       with:
  #         images: ghcr.io/${{ github.repository_owner }}/ ${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=semver,pattern={{version}},value=v${{ inputs.version }}
  #           type=raw,value=latest
  #     - uses: docker/build-push-action@v5
  #       with:
  #         push: true
  #         context: .
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  # test:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   permissions: 
  #     pull-requests: write
  #     contents: read
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: echo "GHCR_USER=$(gh config get -h github.com user)" >> "${GITHUB_OUTPUT}"
  #       id: gh_user
  #     - run: docker build -t ghcr.io/${}
      # - 
      # - uses: ./.github/actions/test/
      #   id: test
      # - run: echo "${RESULT}"
      #   env:
      #     RESULT: ${{ steps.test.outputs.output_text }}
      # - uses: actions/checkout@v4
      # - run: echo "${GITHUB_HEAD_REF}"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     permissions: 
#       contents: write
#       pull-requests: write
#     env: 
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     steps:
#       - uses: actions/checkout@v4
#       - run: echo "${GITHUB_HEAD_REF}"
#       - run: printenv | grep -i github 
        # env:

        
# defaults:
#   run:
#     shell: bash
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true
# jobs:
#   debug:
#     runs-on: ubuntu-latest 
#     steps:
#       - uses: actions/checkout@v4  
#       - uses: ./.github/actions/dump/
#         id: dump
#         with:
#           enable-context: 'true'
#       - run: echo "${DATE}"
#         env: 
#           DATE: ${{ steps.dump.outputs.dumped-date }}
  # upload:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - run: echo "gskfjgkdsfjdfjlsdkjfl" > date.txt
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: uploaded
  #         path: date.txt
  #         retention-days: 7

  # download:
  #   runs-on: ubuntu-latest
  #   needs: [upload]
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: uploaded
  #         path: downloaded
  #     - run: cat downloaded/date.txt
  # test1:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - id: test_1
  #       run: echo "result=TTEESST" >> "${GITHUB_OUTPUT}"
  #   outputs:
  #     result: ${{ steps.test_1.outputs.result }}
  # test2:
  #   runs-on: ubuntu-latest
  #   needs: [test1]
  #   timeout-minutes: 5
  #   steps:
  #     - run: echo ${RESULT}
  #       env:
  #         RESULT: ${{ needs.test1.outputs.result }}

  
  # test:
  #   runs-on: ubuntu-latest 
  #   timeout-minutes: 5
  #   steps:
  #     - run: |

  #         echo "::error::ERROR"
  #         echo "::warning::WARNING"
  #         echo "::notice::NOTICE"

  #         echo "### Title :rocket: " >> "${GITHUB_STEP_SUMMARY}"
  #         echo "- first line" >> "${GITHUB_STEP_SUMMARY}"
  #         echo "- second line" >> "${GITHUB_STEP_SUMMARY}"

      # - uses: actions/checkout@4
      # - run: |
      #     docker run --rm -v "$(pwd):$(pwd)" -w "$(pwd)" rhysd/actionlint:latest